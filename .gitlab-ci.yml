# include:
  # - template: Terraform/Base.latest.gitlab-ci.yml  # https://gitlab.com/gitlab-org/gitlab/blob/master/lib/gitlab/ci/templates/Terraform/Base.latest.gitlab-ci.yml
  # - template: Jobs/SAST-IaC.latest.gitlab-ci.yml   # https://gitlab.com/gitlab-org/gitlab/blob/master/lib/gitlab/ci/templates/Jobs/SAST-IaC.latest.gitlab-ci.yml

image:
  name: "$CI_TEMPLATE_REGISTRY_HOST/gitlab-org/terraform-images/stable:latest"

variables:
  TF_ROOT: ${CI_PROJECT_DIR}  # The relative path to the root directory of the Terraform project
  TF_STATE_NAME: default      # The name of the state file used by the GitLab Managed Terraform state backend

## stages

stages:
  - validate
  - test
  - plan
  - documentation
  - deploy
  - destroy

## common templates

.infra-gdr:parallel:
  parallel:
    matrix:
      - TF_STATE_NAME:
        - reso-t
        - pspn
  resource_group: $TF_STATE_NAME
  cache:
    key: $TF_STATE_NAME
    paths:
      - ${TF_ROOT}/.terraform
      - ${TF_ROOT}/plan.cache

.infra-gdr:merge-request-pipeline-rules:
  rules:
    # ensures the job runs only in merge request pipelines.
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: always
    # ensures the job never runs in branch pipelines.
    - if: $CI_PIPELINE_SOURCE == "push"
      when: never
    # ensures the job never runs in merge request pipelines for merged or closed merge requests.
    - if: $CI_OPEN_MERGE_REQUESTS
      when: never

## validate jobs

fmt:
  stage: validate
  extends: .infra-gdr:merge-request-pipeline-rules
  script:
    - cd "${TF_ROOT}"
    - gitlab-terraform fmt
  allow_failure: true

validate:
  stage: validate
  extends: .infra-gdr:merge-request-pipeline-rules
  script:
    - cd "${TF_ROOT}"
    - gitlab-terraform validate

## plan jobs

plan:
  stage: plan
  extends:
    - .infra-gdr:parallel
  before_script: |
    export TF_VAR_ssh_proxy_port="$(($CI_NODE_INDEX + 2200))"
    echo $TF_VAR_ssh_proxy_port
    source $RUNNER_COMMON_ENV
  script: |
    cd "${TF_ROOT}"
    gitlab-terraform plan
    gitlab-terraform plan-json
  environment:
    name: $TF_STATE_NAME
    action: prepare
  artifacts:
    # The next line, which disables public access to pipeline artifacts, may not be available everywhere
    # See: https://docs.gitlab.com/ee/ci/yaml/#artifactspublic
    public: false
    expire_in: 1 week
    paths:
      - ${TF_ROOT}/plan.cache
    reports:
      terraform: ${TF_ROOT}/plan.json
  rules:
    # ensures the job runs in merge request pipelines.
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: manual
      allow_failure: true
    # ensures the job never runs in merge request pipelines for merged or closed merge requests
    - if: $CI_OPEN_MERGE_REQUESTS
      when: never
    # ensures the job runs in branch pipelines for the default protected branch
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_COMMIT_REF_PROTECTED
      when: always

## deploy jobs

## template for protected branch pipelines
.infra-gdr:protected:
  # https://docs.gitlab.com/ee/ci/pipelines/merge_request_pipelines.html
  # > Merge request pipelines do not have access to protected variables or protected runners
  # https://docs.gitlab.com/ee/ci/jobs/job_control.html#run-a-manual-job
  # > To run a manual job, you must have permission to merge to the assigned branch
  variables:
    TF_VAR_SSH_PRIVATE_KEY_FILE: $RUNNER_SSH_PRIVATE_KEY_FILE
  before_script:
    - source $RUNNER_COMMON_ENV 
    - source $RUNNER_OS_APPLICATION_CREDENTIALS
    - chmod 400 $RUNNER_SSH_PRIVATE_KEY_FILE

deploy:
  stage: deploy
  environment:
    name: $TF_STATE_NAME
  extends:
    - .infra-gdr:parallel
    - .infra-gdr:protected
  script:
    - cd "${TF_ROOT}"
    - gitlab-terraform apply
  rules:
    # ensures the job runs in branch pipelines for the default protected branch
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_COMMIT_REF_PROTECTED
      when: manual

destroy:
  stage: destroy
  environment:
    name: $TF_STATE_NAME
  extends:
    - .infra-gdr:parallel
    - .infra-gdr:protected
  script:
    - cd "${TF_ROOT}"
    - gitlab-terraform destroy -auto-approve
  rules:
    # ensures the job runs in branch pipelines for the default protected branch
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_COMMIT_REF_PROTECTED
      when: manual


## documentation

documentation:
  stage: documentation
  image: python:3.10
  before_script:
    - pip install -r docs/requirements.txt
  script:
    - sphinx-build docs public
  artifacts:
    paths: ['public']
  only:
    - main
